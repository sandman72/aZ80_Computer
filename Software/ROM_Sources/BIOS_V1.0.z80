;==================================================================================
; 
;                aZ80 Retro Z80 System - Attraktor Edition
; 
;                        Initialisation Code
; 
;   Supports starting Microsoft Basic (basic.z80) and Monitor (monitor.z80)
;   and includes additional System Tests
; 
;           Contents of this file are copyright Frank Hellmann
; 
;               https://wiki.attraktor.org/aZ80_Computer
; 
; You have permission to use this for NON COMMERCIAL USE ONLY
; If you wish to use it elsewhere, please include an acknowledgement to myself.
; 
; Based on Grant Searles great work:

;==================================================================================
; 
; Grant Searle
; 
; http://searle.hostei.com/grant/index.html
; 
; eMail: home.micros01@btinternet.com
; 
; If the above don't work, please perform an Internet search to see if I have
; updated the web page hosting service.
; 
;==================================================================================
            .ENGINE aZ80 

BASICSTART  EQU     $01C0 ; Basic Start Adresse im ROM
MONSTART    EQU     $2000 ; Monitor Start Adresse im ROM
SNDPORT     EQU     $FF   ; Standard I/O Port for SN76489 Sound Card is $FF
LEDPORT     EQU     $00   ; Standard I/O Port for DIO LED Card is $00

; Minimum 6850 ACIA interrupt driven serial I/O to run modified NASCOM Basic 4.7
; Full input buffering with incoming data hardware handshaking
; Handshake shows full before the buffer is totally filled to allow run-on from the sender

SER_BUFSIZE EQU     $3F 
SER_FULLSIZE EQU    $30 
SER_EMPTYSIZE EQU   5 

RTS_HIGH    EQU     $0D6 
RTS_LOW     EQU     $096 

SERBUF      EQU     $8000 
SERINPTR    EQU     serBuf+SER_BUFSIZE 
SERRDPTR    EQU     serInPtr+2 
SERBUFUSED  EQU     serRdPtr+2 
BASICSTARTED EQU    serBufUsed+1 
TEMPSTACK   EQU     $80ED ; Top of BASIC line input buffer so is "free ram" when BASIC resets

CR          EQU     $0D 
LF          EQU     $0A 
CS          EQU     $0C ; Clear screen

;------------------------------------------------------------------------------
; RST 00 - Reset
            .ORG    $0000 
RST00:      DI       ;Disable interrupts
            JP      BIOSINIT ;Initialize Hardware and go

;------------------------------------------------------------------------------
; RST 08 - TX a character over serial port

            .ORG    $0008 
RST08:      JP      TXA 

;------------------------------------------------------------------------------
; RST 10 - RX a character over serial port, hold here until char ready.

            .ORG    $0010 
RST10:      JP      RXA 

;------------------------------------------------------------------------------
; RST 18 - Check serial status

            .ORG    $0018 
RST18:      JP      CKINCHAR 

;------------------------------------------------------------------------------
; RST 20 - Jump to Monitor

            .ORG    $0020 
RST20:      JP      MONSTART 

;------------------------------------------------------------------------------
; RST 28 - Free

            .ORG    $0028 
RST28:      RET      

;------------------------------------------------------------------------------
; RST 30 - Free (Reserved for API)

            .ORG    $0030 
RST30:      RET      

;------------------------------------------------------------------------------
; RST 38 - INT INTERRUPT VECTOR [ for IM 1 ] - Serial Int

            .ORG    $0038 
RST38:      JR      serialInt 

;------------------------------------------------------------------------------
; RST 66 - NMI INTERRUPT VECTOR [ for IM 1 ] - Free

            .ORG    $0066 
RST66:      RET      


;------------------------------------------------------------------------------
            .ORG    $0070 
SERIALINT:  PUSH    AF 
            PUSH    HL 

            IN      A,($80) 
            AND     $01 ; Check if interupt due to read buffer full
            JR      Z,rts0 ; if not, ignore

            IN      A,($81) 
            PUSH    AF 
            LD      A,(serBufUsed) 
            CP      SER_BUFSIZE ; If full then ignore
            JR      NZ,notFull 
            POP     AF 
            JR      rts0 

NOTFULL:    LD      HL,(serInPtr) 
            INC     HL 
            LD      A,L ; Only need to check low byte becasuse buffer<256 bytes
            CP      (serBuf+SER_BUFSIZE) & $FF 
            JR      NZ,notWrap 
            LD      HL,serBuf 
NOTWRAP:    LD      (serInPtr),HL 
            POP     AF 
            LD      (HL),A 
            LD      A,(serBufUsed) 
            INC     A 
            LD      (serBufUsed),A 
            CP      SER_FULLSIZE 
            JR      C,rts0 
            LD      A,RTS_HIGH 
            OUT     ($80),A 
RTS0:       POP     HL 
            POP     AF 
            EI       
            RETI     

;------------------------------------------------------------------------------
RXA:                 
WAITFORCHAR: LD     A,(serBufUsed) 
            CP      $00 
            JR      Z,waitForChar 
            PUSH    HL 
            LD      HL,(serRdPtr) 
            INC     HL 
            LD      A,L ; Only need to check low byte becasuse buffer<256 bytes
            CP      (serBuf+SER_BUFSIZE) & $FF 
            JR      NZ,notRdWrap 
            LD      HL,serBuf 
NOTRDWRAP:  DI       
            LD      (serRdPtr),HL 
            LD      A,(serBufUsed) 
            DEC     A 
            LD      (serBufUsed),A 
            CP      SER_EMPTYSIZE 
            JR      NC,rts1 
            LD      A,RTS_LOW 
            OUT     ($80),A 
RTS1:                
            LD      A,(HL) 
            EI       
            POP     HL 
            RET      ; Char ready in A

;------------------------------------------------------------------------------
TXA:        PUSH    AF ; Store character
CONOUT1:    IN      A,($80) ; Status byte
            BIT     1,A ; Set Zero flag if still transmitting character
            JR      Z,conout1 ; Loop until flag signals ready
            POP     AF ; Retrieve character
            OUT     ($81),A ; Output the character
            RET      

;------------------------------------------------------------------------------
CKINCHAR:   LD      A,(serBufUsed) 
            CP      $0 
            RET      

;------------------------------------------------------------------------------
BPRINT:     LD      A,(HL) ; Get character
            OR      A ; Is it $00 ?
            RET     Z ; Then RETurn on terminator
            RST     $08 ; Print it
            INC     HL ; Next Character
            JR      BPRINT ; Continue until $00
            RET      
            
;------------------------------------------------------------------------------
SILENCE:    LD      A,$9F            ; Mute Chan 1
            OUT     SNDPORT,A
            LD      A,$BF            ; Mute Chan 2
            OUT     SNDPORT,A
            LD      A,$DF            ; Mute Chan 3
            OUT     SNDPORT,A
            LD      A,$FF            ; Mute Chan 4
            OUT     SNDPORT,A
            RET

;------------------------------------------------------------------------------
LEDOFF:     LD      A,$00            ; LEDs off
            OUT     LEDPORT,A
            RET
LEDHALF:    LD      A,%10101010      ; Half of the LEDs on
            OUT     LEDPORT,A
            RET
            
;------------------------------------------------------------------------------
BIOSINIT:            
            LD      HL,TEMPSTACK ; Temp stack
            LD      SP,HL ; Set up a temporary stack
            LD      HL,serBuf 
            LD      (serInPtr),HL 
            LD      (serRdPtr),HL 
            XOR     A ;0 to accumulator
            LD      (serBufUsed),A 
            LD      A,RTS_LOW 
            OUT     ($80),A ; Initialise ACIA
            IM      1 ; Interrupt Mode 1
            EI       ; Enable Interrupts
            
            CALL    LEDHALF ; Turn on half of the LEDs
            CALL    SILENCE ; Turn off Soundcard

            LD      HL,SIGNON1 ; Sign-on message
            CALL    BPRINT ; Output string
            LD      A,(basicStarted) ; Check the BASIC STARTED flag
            CP      "Y" ; to see if this is power-up
            JR      NZ,COLDSTART ; If not BASIC started then always do cold start
            LD      HL,SIGNON2 ; Cold/warm message
            CALL    BPRINT ; Output string
            CALL    LEDOFF ; Turn off LEDs

;------------------------------------------------------------------------------
INPUTLOOP:           
            CALL    RXA 
            AND     %11011111 ; lower to uppercase

            CP      "C" ; C -> Cold Start?
            JP      Z,COLDSTART ; 
            CP      "W" ; W -> Warm Start?
            JP      Z,WARMSTART 
            CP      "M" ; M -> Monitor Start?
            JP      Z,MONISTART 

            JP      INPUTLOOP 

COLDSTART:  LD      A,"Y" ; Set the BASIC STARTED flag
            LD      (basicStarted),A 
            JP      BASICSTART ; Start BASIC COLD

WARMSTART:           
            LD      HL,CRLF ; New line
            CALL    BPRINT ; Output string
            JP      BASICSTART+3 ; Start BASIC WARM

MONISTART:           
            LD      HL,CRLF ; New line
            CALL    BPRINT ; Output string
            JP      MONSTART ; Start Monitor

SIGNON1:    DB      CS,CR,LF 
            DB      "aZ80 System BIOS - Attraktor e.V.",CR,LF,0 
SIGNON2:    DB      CR,LF 
            DB      "Start BASIC (C)old, (W)arm or (M)on?",0 
CRLF:       DB      CR,LF,0 

            .END     
