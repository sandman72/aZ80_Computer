;-------------------------------------------------
;Z80 DISASSEMBLER LISTING
;Label  Instruction
;-------------------------------------------------

;VERSION HISTORY 

; AFTER DDCB COMMANDS EXCLUDED
;FILL ADDED, DISASSEMBLER NOTFOUNT RESULT IMPROVED
;ASSEMBLER HAVE LIMITED BACKSPACE
;HEX INPUT IMPROVED

; Minimum 6850 ACIA interrupt driven serial I/O to run modified NASCOM Basic 4.7
; Full input buffering with incoming data hardware handshaking
; Handshake shows full before the buffer is totally filled to allow run-on from the sender

SER_BUFSIZE     .EQU     $3F
SER_FULLSIZE    .EQU     $30
SER_EMPTYSIZE   .EQU     5

RTS_HIGH        .EQU     $0D6
RTS_LOW         .EQU     $096

serBuf          .EQU     $8000
serInPtr        .EQU     serBuf+SER_BUFSIZE
serRdPtr        .EQU     serInPtr+2
serBufUsed      .EQU     serRdPtr+2
basicStarted    .EQU     serBufUsed+1
TEMPSTACK       .EQU     $80ED ; Top of BASIC line input buffer so is "free ram" when BASIC resets

;INTLIN1 TURNED INTO SUBROUTINE
;S-AVE, L-OAD, E-DIT,R-UN,M-OVE COMMANDS ADDED
;EFEX INLINE ASSEMBLER V.087 - 06.APR.2017

;SYSTEM VARIABLES:
;3F60-3F6F  :COMMAND INPUT BUFFER			;COMINBUF
;3FA0-3FA1  :COMMAND LINE LENGHT TO BE TRANSLATED	;LINELENGHT
;3F80-3F90  :CODE BUFFER-----				;CODEBUF
;3FA2-3FA3  :MNEMONIC TABLE FFINDED INDEX ADRESS	;TABFINDAD
;3FA4-3FA5  :ASSEMBLY ADRESS				;ASADR
;3FA6-3FA7  :ASSEMBLY ADRES + CODES TO WRITE MEMORY	;ASADCODE
;3FB0	    :OPERAND BYTE COUNT				;OPBYTECNT
;3FB2	    : # OR $ OR NULL				;DIYEZDOLAR
;3F42       :# CONTENT (DATA)				;DATAINP
;3F43-3F44  :$ CONTENT (ADRESS)				;ADRSINP
;3FB3-3FB4  :CODE BUF. LENGHT				;CODEBUFLEN
;
;
;ASSEMBLER VARIABLES FOR ROM:
  	COMINBUF .EQU 0FF60H    ;10H CHAR LENGHT
	CODEBUF .EQU 0FF80H	;10H CHAR LENGHT
	LINELENGHT .EQU 0FFA0H	;2 BYTE
	TABFINDAD .EQU 0FFA2H	;2 BYTE
	ASADR .EQU 0FFA4H		;2 BYTE
	ASADCODE .EQU 0FFA6H	;2 BYTE
	OPBYTECNT .EQU 0FFB0H	;1 BYTE
	DIYEZDOLAR .EQU 0FFB2H	;1 BYTE
	DATAINP .EQU 0FF42H	;1 BYTE
	ADRSINP .EQU 0FF43H	;2 BYTE
	CODEBUFLEN .EQU 0FFB3H	;2 BYTE

	KEYINBUF .EQU 0FF20H	;4 BYTE
	KEYINRES .EQU 0FF40H	;4 BYTE
	
;HEX RECORD VARIABLES FOR ROM
	HEXLDREG .EQU 0FF4BH	;2 BYTE
	LOADSTADR .EQU 0FF50H	;2 BYTE
	SAVECHCK .EQU 0FF34H	;2 BYTE
	LOWNIBBLE .EQU 0FF32H	;1 BYTE
	HIGHNIBBLE .EQU 0FF33H	;1 BYTE
;EDIT ADRESS
	EDITADR .EQU 0F906H
;STACK POINTER;
	STACKPOINT .EQU  0F7FDH	;2 BYTE ; UNCOMMENT THIS TO RUN IN ROM
;BASIC WARMSTART
    BASICW  .EQU $01C0  ;Basic warmstart Addr

.ORG 2000H

;----------------GREETING MESSAGE----------------------
GREET:
	LD HL,TABLE  ; GREETING  MSG
	LD B,73      ; DECIMAL IF NOT H AT THE END
	CALL MPRINT

;------------------------MAIN PROGRAM----------------------


MA_IN:
    CALL MPROMPT
	RST 10H
    AND  %11011111       ; lower to uppercase

	CP 'S'
	CALL Z, SAVEX		;SAVE IHEX FILE
	CP 'L'
	JP Z,LOADERZ		;LOAD IHEX FILE
	CP 'A'
	JP Z,ASSEMBLE		;ASSEMBLER
	CP 'G'
	JP Z,RUN_ADR		;GO TO ADRESS
	CP 'E'
	JP Z,EDIT		    ;EDIT ADRESS
	CP 'M'
	JP Z, MOVE	    	;MOVE MEMORY BLOCKS
	CP 'H'
	JP Z, HELP  		;HELP SUBROUTINE
	CP 'B'
	JP Z, BASICW        ;BASIC Warmstart
	CP 'W'
	JP Z, GREET 		;RESTART
	CP 'U'
	JP Z, USEFUL		;USEFUL ROUTINES
	CP 'D'
	JP Z, DISASSEMBLER
	CP 'F'
	JP Z, FILL
	CP 'X'
	JP Z, HEXDUMP		;DUMP MEMORY CONTENT
	
	LD A, 0AH
	RST 08H
	LD A, 0DH
	RST 08H
	JP MA_IN		;MAIN LOOP OF MONITOR PROGRAM
	
MPROMPT:	
    LD HL,TABLE6
	LD B,3   ; DECIMAL IF NOT H AT THE END
	CALL MPRINT
	RET

;---------------MPRINT STRING - LEN in Reg B ----------------
MPRINT:
    LD A,(HL)
    RST 08H
	INC HL
    DJNZ MPRINT
    RET	

;--------------------------HELP-----------------------------
HELP:
	LD HL,TABLE21
	LD BC,110   ; DECIMAL IF NOT H AT THE END
DIS21:
    LD A,(HL)
	RST 08H
    INC HL
	DEC BC
	LD A,B
	OR C
	JR NZ,DIS21
	
	
	JP MA_IN

	
;-------------------USEFUL ROUTINES-----------
USEFUL:	             ;HELP MSG


	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H
	
	
;	LD HL,TABLEH9
;	LD B,23
;	CALL MPRINT
	
		
	LD HL,TABLE22
	LD B,14   
	CALL MPRINT

HELP1:	
    LD HL,08H
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	
	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H

	LD HL,TABLEH1
	LD B,14
	CALL MPRINT
			
	LD HL,10H
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	
	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H
		
	LD HL,TABLEH2
	LD B,14	
	
	CALL MPRINT

	LD HL,BYTEIN2
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	
	LD HL,TABLEH3
	LD B,15
	CALL MPRINT
	
	LD HL,TABLEH4
	LD B,14
	CALL MPRINT
	
	LD HL,BYTEIN1
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT

	LD HL,TABLEH5
	LD B,10
	CALL MPRINT
	
	LD HL,TABLEH6
	LD B,14
	CALL MPRINT
	
	LD HL,HEXOUT
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	
	LD HL,TABLEH7
	LD B,12
	CALL MPRINT	
	
	LD HL,TABLEH8
	LD B,14
	CALL MPRINT
	
	LD HL,MA_IN
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	
	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H
	
	
	
	LD HL,TABLEH10
	LD B,14
	CALL MPRINT
	
	LD HL,DE_LAY
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT

	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H
	
	
	JP MA_IN
	
	
;--------------DELAY 500MS---------------	
DE_LAY:
	
	PUSH DE
	LD DE,08000H
DISDELAY:
	DEC DE
	LD A,D
	OR E
	JR NZ,DISDELAY
	POP DE
	RET
;--------------------------------------		

;-------------HEXDUMP--------------------------
;HEXDUMP OF INPUTTED MEMORY- +FFH

HEXDUMP:
	LD A,'X'
	RST 08H
	LD A,'-'
	RST 08H 
	LD A, '$'
	RST 08H
	LD A, '?'
	RST 08H
	LD A, 08H
	RST 08H ; DISPLAY 4 CHAR INPUT MPROMPT
	
	
	
;        LD HL, KEYINBUF
;	LD B,4
;DISX1:	RST 10H
;	CP 1BH
;	JP Z, MA_IN
;	LD (HL), A
;	INC HL
;	RST 08H
;	DJNZ DISX1	;INPUT 4 CHAR
;	CALL INTLINR	;EXTRACT ADRESS

	CALL BYTEIN2	;4 CHAR INPUT, RESULT IN (ADRSINP)
	
	
	LD HL,(ADRSINP) 	
DONGUY:	LD DE,000FH		;SHOW 16 LINES
DONGUX:	
	LD A,0DH		;ENTER
	RST 08H 
	LD A,0AH
	RST 08H

	LD A,H 			;MPRINT ADRESS AND :
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	LD A,':'
	RST 08H
	LD A,' '
	RST 08H 
	LD A,' '
	RST 08H 
	
	LD B,8		;FIRST 8 BYTE
DUMBP:	LD A,(HL)
	CALL HEXOUT
	LD A,' '
	RST 08H 
	INC HL
	DJNZ DUMBP
	
	LD A,' '
	RST 08H
	LD A,' '
	RST 08H
	LD A,' '
	RST 08H
		
	LD B,8		;SECOND 8 BYTE
DUMBP2:	LD A,(HL)
	CALL HEXOUT
	LD A,' '
	RST 08H 
	INC HL
	DJNZ DUMBP2

	DEC DE
	LD A,D
	OR E
	JP NZ, DONGUX
	
CIKIS:	
    RST 10H
	CP 01BH
	JP Z,MA_IN		;ESC : EXIT TO MAIN MENU
	CP 0DH
	JP Z,DONGUY		;ENTER OR SPACE CONT. TO LISTING
	CP 020H
	JP Z,DONGUY
	JP CIKIS
	


;---------------efex-ASSEMBLER---v0.87beta-STARTS HERE---------------
;                                                                    |
;                      A  S  S  E  M  B  L  E  R                     |
;                                                                    |
;                       BACKSPACE WORKS IN TEXT                      |
;                     NO BACKSPACE AFTER # OR $                      |
;                         SYNTAX CHECK ADDED                         |
;                                                                    |
;--------------------------------------------------------------------
;INPUT ASSEMBLER ADRESS-------

ASSEMBLE:
	LD A,0		
	LD (OPBYTECNT),A	;OPERAND BYTE COUNT RESET
	LD A,0
	LD (DIYEZDOLAR),A	;#,$,NULL RESET AS NULL

ASS_ADR:
	LD A,'A'       ;ASSEMBLY START ADRESS
	RST 08H
	LD A,'-'
	RST 08H 
	LD A, '$'
	RST 08H
	LD A, '?'
	RST 08H
	LD A, 08H
	RST 08H ; DISPLAY 4 CHAR INPUT MPROMPT
	
	CALL BYTEIN2
	
	LD HL, (ADRSINP)
	LD (ASADR),HL
	
		
	LD HL,TABLE_AS ;ASSEMBLER MESSAGE
	LD B,14   
	CALL MPRINT
	
	
	LD A, 0DH
	RST 08H
	LD A, 0AH
	RST 08H
	
	
;---------------main assembler loop start here------------	
	
AS_DON:	LD A, 0AH
	RST 08H
AS_DON2:
	LD A, 0DH
	RST 08H
	
	LD HL,(ASADR)	;ASSEMBLY ADRESS
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	
	LD A, ' '
	RST 08H
	LD A, ' '
	RST 08H
	
	


	
	LD BC,0001H
	LD (LINELENGHT),BC;     ;CLEAR LENGHT REG

	CALL CLRBUF         ;CLEAR INPUT BUFFERS
	LD HL,COMINBUF
	LD B,0FH
DIS32:	
    RST 10H
	CP 0DH
	JP Z,BITTI         ;ENTER BASILDIYSA BITIR
	CP 1BH
	JP Z,MA_IN         ;ESC BASILDIYSA CIK
	CP 08H
	JP Z,HATALI
	
	
	RST 08H         ;MPRINT CHAR

	CP '#'
	CALL Z,BYTEINP1
	CP '$'
	CALL Z,BYTEINP2
	LD (HL),A
	INC HL
	DJNZ DIS32  ;GET COMMAND TO BUFFER 16 CHAR  LENGHT, TILL CR
	
	
HATALI:	
    LD A,08H
	RST 08H
	LD A,' '
	RST 08H
	LD A,08H
	RST 08H
	DEC HL
	INC B
	JP DIS32
	
;       ---------------------------	
BITTI: 	
    LD A,0FH         
	SUB B
	LD (LINELENGHT), A   ;SAVE INPUT REGISTER LENGHT TO BC
		        ;TO LINELENGHT-3FA1 AND EXIT FROM INPUT
			;ALL CODE TAKEN INTO INPUT REG., LENGHT IN LINELENGHT-3FA1H
	LD A,00H
	LD (LINELENGHT + 1), A    
		
		
	JP INTERPRET	;JUMP TO INTERPRETER
	

	
;--------LINE INPUT FINISHED HERE----- 
;------------------------------------------------------------------------
;            	                                                         |
;	RESULT: Mnemonic string in COMINBUF (INPUT BUFFER)               |
;         Mnemonic lenght in LINELENGHT  (for use Register BC)           |
;        if operand=$: result in ADRSINP-FF43H FF44h                     |
;	 if operand=#: result in DATAINP-FF42                            |
;		                                                         |
;-------------------------------------------------------------------------	
	
		 
;---------------INTERPRETER STARTS HERE--------------------------
;Interpreter translates input buffer mnemonics to machine code
;
;            SYSTEM VARIABLES OF INTERPRETER
;
;
;FF60-FF6F  :COMMAND INPUT BUFFER
;FFA0-FFA1  :COMMAND LINE LENGHT TO BE TRANSLATED
;FF80-FF90  :CODE BUFFER----
;FFA2-FFA3  :MNEMONIC TABLE FFINDED INDEX ADRESS
;FFA4-FFA5  :ASSEMBLY ADRESS
;FFA6-FFA7  :ASSEMBLY ADRES + CODES TO WRITE MEMORY
;FFB0	    :OPERAND BYTE COUNT
;FFB2	    : # OR $ OR NULL
;FF42       :# CONTENT (DATA)
;FF43-FF44  :$ CONTENT (ADRESS)
;FFB3-FFB4  :CODE BUF. LENGHT	

INTERPRET:		;ASSEMBLER INTERPRETER
	CALL FINDCOM	;FIND MNEMONIC FROM TABLE
	
	LD A,' '
	RST 08H
	LD A,' '
	RST 08H
	
	
	
	LD DE,CODEBUF	;CODE BUFFER
	LD HL,(TABFINDAD) 	;MNEMONIC ADRESS FROM TABLE (HOLDS BYTE COUNT AT THE MOMENT)
			
		
	LD A,(HL)	;OPERAND COUNT
	LD B,A
	LD C,0 	; CODE COUNT RESET

	
	INC HL		;HL AT FIRST OPERAND ADRESS(COMMAND)
DISIN:	LD A,(HL) 	;TAKE COMMAND 
	LD (DE),A	;WRITE TO CODE BUFFER
	INC HL
	INC DE
	INC C
	DJNZ DISIN
	
	LD A,(DIYEZDOLAR)
	CP '#'
	CALL Z, DIYEZ1
	CP '$'
	CALL Z, DOLLAR1
	
	LD A,C
	LD (CODEBUFLEN),A    ;CODE LENGHT
	

	LD A,(DIYEZDOLAR)  	;JUST OUTPUT COMPOSER TO GOOD VIEW
	CP 0
	JP NZ, UZUN
	LD A,' '
	RST 08H	
	LD A,' '
	RST 08H
	LD A,009H
	RST 08H

UZUN:	LD A,' '
	RST 08H
	LD A,009H
	RST 08H

	
		
	
	
	
	
	LD HL,CODEBUF
	LD B,C
	LD A,' '
	RST 08H 
	LD A,':'
	RST 08H 
	
ISTEBU:	LD A,(HL)
	CALL HEXOUT
	LD A,' '
	RST 08H
	INC HL
	DJNZ ISTEBU
	
	
	
;------LINE ASSEMLY COMPLETED HERE 

	LD HL,(ASADR)    
	LD (ASADCODE),HL	
	LD B,0
	ADD HL,BC
	LD (ASADR),HL
	
	
	
	
YAZIM:	LD A,(CODEBUFLEN)   	;;WRITE ASSEMBLY LINE CODES FROM CODE BUFFER TO MEMORY
	LD B,A		;CODE LENGHT

	
	LD HL,(ASADCODE)  ; ASSEMBLY LINE START ADRESS
	LD DE,CODEBUF	;CODE BUFFER START ADRESS
DISYAZ:	LD A,(DE)
	LD (HL),A
	INC HL
	INC DE
	DJNZ DISYAZ    ;WRITE ASSEMBLY LINE CODES TO MEMORY
	
	
	
	
	JP AS_DON	;GO TO NEXT ASSEMBLY LINE
	;JP MA_IN
	
DIYEZ1: 	
	LD A,(DATAINP)	;CHANGE # CHAR TO OPERAND BYTE
	LD (DE),A
	INC DE
	INC C
	RET
	
DOLLAR1:
	
 	LD A,(ADRSINP)   ;CHANGE $ CHAR TO DOUBLE OPERAND BYTE
	LD (DE),A
	INC DE
	INC C
	LD A,(ADRSINP+1)
	LD (DE),A
	INC DE
	INC C
	RET
	
	
	


BYTEINP1:
	LD (DIYEZDOLAR),A
	CALL BYTEIN1 ;AFTER#
	RET
	
BYTEINP2:
	LD (DIYEZDOLAR),A
	CALL BYTEIN2 ;AFTER$
	RET



CLRBUF:	LD HL,COMINBUF
	LD B,0FH
DIS30:	LD A,00H
	LD (HL),A
	INC HL
	DJNZ DIS30  ;CLEAR INPUT BUFFER
	
	
	LD HL,CODEBUF
	LD B,0FH
DISCB:	LD A,00H
	LD (HL),A
	INC HL
	DJNZ DISCB  ;CLEAR CODE BUFFER
	
	LD A,0
	LD (LINELENGHT),A	;CLEAR ALL COUNTER BUFFERS
	LD (LINELENGHT+1),A
	LD (OPBYTECNT),A
	LD (DIYEZDOLAR),A
	LD (CODEBUFLEN),A
	LD (CODEBUFLEN+1),A
	
	
	RET
	
	

TABLE_AS:
	.DB 0AH,0DH
	.DB 'Assembler:'
	.DB 0AH,0DH
	

; THIS ROUTINE INSPIRED FROM NAIVE STRING MATCHING ALGORITHM!!

FINDCOM:		;SEARCH UTIL OF INTERPRETER 
	PUSH AF
	PUSH HL
	PUSH DE
	PUSH BC 

	LD HL,TABLECOD   ;SEARCH AND FIND MNEMONIC TABLE ADRESS INDEX
	LD (TABFINDAD),HL
LOOPF:	LD HL,(TABFINDAD)
	LD DE, COMINBUF
	LD BC,(LINELENGHT)
		
LOOPC:	LD A,(DE)
	CP (HL)
	JP NZ, NOTFOUND
	INC HL
	INC DE
	DEC BC
	LD A, B
	OR C
	JP NZ,LOOPC
	
	JP FOUND
	
NOTFOUND:		;IF STRING NOT FOUND INCREASE TABLE SEARCH ADRESS
	LD HL,(TABFINDAD)	;THIS IS NAIVE STRING MATCHING ALGORITHM
	INC HL
     ;THIS CODE ADDED FOR TABLE END CONTROL	

	PUSH HL			;;TABLE END CONTROL FOR SYNTAX MERROR
	PUSH DE
	
	LD HL,CODEND
	LD DE,(TABFINDAD)
	OR A     ;CLEAR CARRY FLAG
	SBC HL,DE
	JP Z,ENDCONTROL
	
	POP DE
	POP HL

	
	
     ;THIS CODE ADDED FOR TABLE END CONTROL	
	LD (TABFINDAD),HL
	JP LOOPF       ;IF NOT CONTINUE SEARCH
	

FOUND:	LD (TABFINDAD),HL     ;FINDED ADRESS IN TABLE
	POP BC
	POP DE
	POP HL
	POP AF
	RET
	
ENDCONTROL:		
	LD A,0DH
	RST 08H
	LD A,0AH
	RST 08H
	LD B,14
	LD HL,MERROR
DISERR:	LD A,(HL)
	RST 08H
	INC HL
	DJNZ DISERR
	POP DE
	POP HL
	
	JP AS_DON
	
MERROR:	.DB 'Syntax '
	.DB 'MERROR !'
	
;--INTERPRETER ENDED

;---------efex-ASSEMBLER FINISHED HERE--------------------------------------



;-----------------efex DISASSEMBLER-START-HERE----------------------------------
;
;FFC0H :TOTBYTECNT   ;TOTAL BYTE COUNT OF LINE
;FFC2H :DISCODELEN   ;TABLE FINDED COMMAND BYTE LENGHT 1,2,3,OR 4..
;FFC4H :DISTOTLEN    ;COMMAND TOTAL LENGHT WITH OPERAND
;FFC6H :NULDOLNUM    ;IF THE OPERAND NULL, BYTE OR WORD(1 BYTE-2 BYTE) # OR DOLLAR
;FFD0H :DISADDR	     ;DISSASEMBLING ADRESS
;FFD2H :DISFINDAD    ;DISASEMBLER FINDED CODE ADRESS
;FFD4  :MNESTAD	     ;MNEMONIC START ADRESS IN TABLE 
;FFD6  :MNENDAD	     ;MNEMONIC END ADRESS IN TABLE
;FFDAH :MNELEN       ;MNEMONIC LENGHT
;F900H :NEXTCODE     ;NEXT CODE START ADRESS IN DISSASEMBLE SECTOR !!!!FFDC CALISMADI!!!!
;F902H :SECTORC      ;DISASEMBLING  LINE COUNT
;FFD8H :OPERAND      ;# OR $ OPERAND IN COMMAND LINE
;FFE0H :OPCNT        ;OPERAND COUNT (#,$ : 0,1 OR 2)
;3F80-3F90  :CODEBUF         ;CODE BUFFER-----				

DISASSEMBLER:
	TOTBYTECNT EQU 0FFC0H
	DISADDR EQU 0FFD0H
	DISFINDAD EQU 0FFD2H
	DISCODELEN EQU 0FFC2H
	DISTOTLEN EQU 0FFC4H
	MNESTAD EQU 0FFD4H
	MNENDAD EQU 0FFD6H
	OPERAND EQU 0FFD8H
	MNELEN EQU 0FFDAH
	NEXTCODE EQU 0F900H
	SECTORC EQU 0F902H
	OPCNT EQU 0FFE0H
	

	
	
	LD HL,TABLE_DS ;DISASSEMBLER MESSAGE
	LD B,24   
DISDS:	LD A,(HL)
	RST 08H
        INC HL
	DJNZ DISDS
	JP CONTDS
	
TABLE_DS:
	.DB 0AH,0DH
	.DB 'Disassembly '
	.DB 'listing:'
	.DB 0AH,0DH
	
	
CONTDS:
	LD A,0
	LD (LINELENGHT),A	;CLEAR ALL COUNTER BUFFERS
	LD (LINELENGHT+1),A
	LD (OPBYTECNT),A
	LD (DIYEZDOLAR),A
	LD (CODEBUFLEN),A
	LD (CODEBUFLEN+1),A
	LD (TOTBYTECNT),A
	LD (DISCODELEN),A
	LD (OPCNT),A
	LD (NEXTCODE),A
	LD (NEXTCODE +1),A
	
;---Disasembling adress input---
ASKDIS: LD A,'D'
	RST 08H
	LD A,'-'
	RST 08H 
	LD A, '$'
	RST 08H
	LD A, '?'
	RST 08H
	LD A, 08H
	RST 08H ; DISPLAY 4 CHAR INPUT MPROMPT
	
	CALL BYTEIN2
	
	LD HL,(ADRSINP) ; 3F43 STORES RESULT ADRESS
	LD A, ':'
	RST 08H
	
	LD HL,(ADRSINP)   ;GIRILEN ADRESS
	LD (NEXTCODE),HL	;NEXTCODE IS INCREASE LOOP ADRESS FOR DISASSEMBLER
;----------ADRESS INPUT COMPLETED HERE---

DONDISZ:
	LD A,16			;16 LINES SHOWING PER PROCESS
	LD (SECTORC),A
	
DONDISY:
	LD A,0
	LD (LINELENGHT),A	;CLEAR ALL COUNTER BUFFERS
	LD (LINELENGHT+1),A
	LD (OPBYTECNT),A
	LD (DIYEZDOLAR),A
	LD (CODEBUFLEN),A
	LD (CODEBUFLEN+1),A
	LD (TOTBYTECNT),A
	LD (DISCODELEN),A
	LD (OPCNT),A
	

DONDISX:
	LD HL,(NEXTCODE)				;MAIN LOOP FOR DISASEMBLY LINES
	LD (DISADDR),HL        
											
	LD HL,1
	LD (LINELENGHT),HL
	LD HL,TABLECOD
	LD DE,(DISADDR)
		
DONDIS:	LD A,(DE)

	CP 0EDH
	JP Z,AFTER		;IF AFTER ED,CB,DD,FD COMMANDS 
	CP 0CBH
	JP Z,AFTER
	CP 0DDH
	JP Z,AFTER
	CP 0FDH
	JP Z,AFTER

	

	
	CP (HL)
	JP Z,CHECKINDEX     ;JP Z,FOUNDDIS
	INC HL
DVM1:	JP DONDIS
	
	
CHECKINDEX:      ;CHECK IF 0FFH AFTER CODE?
	INC HL 
	LD A,0FFH
	CP (HL)
	JP NZ,DVM1 ;NO INDEX--->CONT TO SEARC
	DEC HL     ;INDEX FOUND, DEC HL TO COMMAND'S ADRESS
	JP FOUNDDIS
		
	;----AFTER DD DE,EE,FB,.. COMMANDS PROCESS START HERE---
AFTER: 


	LD HL,AFTERCOD   ;SEARCH AND FIND MNEMONIC TABLE ADRESS INDEX
	LD (TABFINDAD),HL
LOOPFD:	LD HL,(TABFINDAD)
	LD DE, (DISADDR)
	LD BC,2         ;(LINELENGHT)
		
LOOPCD:	LD A,(DE)
	CP (HL)
	JP NZ, NOTFOUNDD
	INC HL
	INC DE
	DEC BC
	LD A, B
	OR C
	JP NZ,LOOPCD
	
	JP FOUNDD
	
NOTFOUNDD:		;IF STRING NOT FOUND INCREASE TABLE SEARCH ADRESS
	LD HL,(TABFINDAD)	;THIS IS NAIVE STRING MATCHING ALGORITHM
	INC HL
	
     ;THIS CODE ADDED FOR TABLE END CONTROL	

	PUSH HL			;;TABLE END CONTROL FOR SYNTAX MERROR
	PUSH DE
	
	LD HL,CODEND
	LD DE,(TABFINDAD)
	OR A     ;CLEAR CARRY FLAG
	SBC HL,DE
	JP Z,ENDCONTROLD
	
	POP DE
	POP HL

	
	
     ;THIS CODE ADDED FOR TABLE END CONTROL	
	
	LD (TABFINDAD),HL
	JP LOOPFD       ;IF NOT CONTINUE SEARCH
	
ENDCONTROLD:		;UNKNOWN CODE ROUTINE; MPRINT *** AND GOTO NEXT ADRESS

	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H

	LD HL,(DISADDR)
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	LD A,' '
	RST 08H
	LD A,' '
	RST 08H		
	LD A,'*'
	RST 08H
	LD A,'*'
	RST 08H
	LD A,'*'
	RST 08H

	
	INC HL
	INC HL
	LD (NEXTCODE),HL
	JP DONDISX
	

	

FOUNDD:	LD HL,(TABFINDAD)
	
	LD (DISFINDAD),HL

	
	
	

;------AFTER DD DE EE FB.. COMMANDS PROCESS END HERE

	
FOUNDDIS:		;ANYWAY (AFTER OR SINGLE) COMMAND FOUND	
	;LD  HL,(TABFINDAD)

	LD  (DISFINDAD),HL

	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H
	

	LD HL,(DISFINDAD) 	;FINDED CODE FIRST BYTE
	DEC HL
	LD A,(HL)
	LD (DISCODELEN),A   	;CODE BYTE LENGHT
	DEC HL
	LD (MNENDAD),HL		;MNEMONIC END ADRESS
	
DIS45:	DEC HL
	LD A,(HL)
	CP '_'
	JR NZ, DIS45
	INC HL
	LD (MNESTAD),HL		;MNEMONIC START ADRESS IN TABLE
	LD A,(DISCODELEN)
	LD B,A
	LD HL,(DISADDR)
DIS51:	INC HL
	DJNZ DIS51
	
	
					;HL HOLDS OPERAND FIRST BYTE HERE
	LD (OPERAND),HL	 ;OPERAND1: IF #; FIRST BYTE, IF $; LOW AND HIGH BYTES IN ORDER
	
		
	
DISPROC:		;WRITES DISASEMBLED CODE TO CODE BUFFER

	LD A,0DH
	RST 08H
	LD A,0DH
	RST 08H
	
	; BURADA MNEMONIC LENGHT IN HESAPLANMASI GEREKIYOR
	LD HL,(MNESTAD)
	LD D,H
	LD E,L
	LD HL,(MNENDAD)
	OR A
	SBC HL,DE
	LD (MNELEN),HL
	
	LD A,(MNELEN)	;AT LAST ITS 1 BYTE AND STORED IN L
	

	LD HL,(DISADDR)
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	LD A,' '
	RST 08H
	LD A,' '
	RST 08H
		
	
	
	LD A,(MNELEN)	;AT LAST ITS 1 BYTE AND STORED IN L
	LD HL,(MNESTAD)
	LD B,A	;(MNELEN)
	INC B
DIS46:	LD A,(HL)
	CP '#'
	JP Z,DISDIYEZ
	CP '$'
	JP Z,DISDOLAR
	RST 08H
DIS50:	INC HL
	DJNZ DIS46
	

	


	LD HL,(NEXTCODE)
	LD A,(DISCODELEN) ;CODE LENGHT
	LD B,A
	LD A,(OPCNT)	;OPERAND COUND
	ADD A,B
	LD DE,0
	LD E,A
	ADD HL,DE
	LD (NEXTCODE),HL
	
	
	
	LD A,(SECTORC)
	DEC A
	JP Z,DONE    	;JP Z,MA_IN
	LD (SECTORC),A

	JP DONDISY
	;JP MA_IN		;EXIT POINT FROM DISASSEMBLER
	
DONE:	
    RST 10H
	CP 01BH
	JP Z,MA_IN
	JP DONDISZ
	JP DONE	

		
	
DISDIYEZ:
	LD A,1
	LD (OPCNT),A
	LD A,'#'
	RST 08H
	PUSH HL
	LD HL,(OPERAND)
	LD A,(HL)
	CALL HEXOUT
	POP HL
	JP DIS50
	
DISDOLAR:
	LD A,2
	LD (OPCNT),A
	LD A,'$'
	RST 08H
	PUSH HL
	LD HL,(OPERAND)
	INC HL
	LD A,(HL)
	CALL HEXOUT
	DEC HL
	LD A,(HL)
	CALL HEXOUT
	POP HL
	JP DIS50
	
				

;--------------DISASSEMBLER FINISHED HERE
	


;------------------------------------MOVE---------------------------------

MOVE: 		


	CALL MOVE_SR     ;HL HOLDS SOURCE
	PUSH HL
	CALL MOVE_DT     ;DE HOLDS TARGET
	PUSH DE
	CALL MOVE_LNT    ;BC HOLDS LENGHT
	
	POP DE
	POP HL
	
	
LOP15:	LD A,(HL)      ;BLOCK COPY SUBROUTINE
	LD (DE),A
	INC HL
	INC DE
	DEC BC
	LD A,B
	OR C
	JP NZ, LOP15
	
	LD HL, TABLE14   ;MOVE COMPLETE MSG
	LD B,19   
	CALL MPRINT

	
	JP MA_IN
	
	
MOVE_SR:
	LD HL,TBLMVSR	;  DISPLAY 4 CHAR INPUT MPROMPT
	LD B,17
	CALL MPRINT
	CALL BYTEIN2
	LD HL,(ADRSINP) ;HL HOLDS SOURCE ADRESS
	RET


MOVE_DT:
	LD HL,TBLMVDT
	LD B,18
	CALL MPRINT
	CALL BYTEIN2	;2 BYTE INPUT
	LD HL, (ADRSINP)
	EX DE,HL     ;DE HOLDS TARGET ADRESS
	RET
	
	
MOVE_LNT:
	LD HL,TBLMVLN
	LD B,12
	CALL MPRINT
	CALL BYTEIN2	;2 BYTE INPUT
	LD HL, (ADRSINP)  
	LD B,H
	LD C,L          ;BC HOLDS BLOCK LENGHT 
	RET

TBLMVSR:
	.DB 0AH,0DH
	.DB 'Move Source '
	.DB '$?',08H

	
TBLMVDT:
	.DB 020H,020H
	.DB 'Destination  '
	.DB '$?',08H
	
TBLMVLN:
	.DB 020H,020H
	.DB 'Lenght '
	.DB '$?',08H

TABLE14:
	.DB 0AH,0DH 
	.DB 'Move '
	.DB 'complete !'
	.DB 0AH,0DH
	

;--------------MOVE END

;------------------------------------FILL---------------------------------

FILL: 		


	CALL FILL_SR     ;HL HOLDS START ADR
	PUSH HL
	CALL FILL_DT     ;DE HOLDS LENGHT
	PUSH DE
	CALL FILL_BYTE
		
	POP DE
	POP HL
	
	
LOP15F:	LD A,C	;FILL SUBROUTINE
	LD (HL),A      
	INC HL
	DEC DE
	LD A,D
	OR E
	JP NZ, LOP15F
	
	LD HL, TABLE14F   ;MOVE COMPLETE MSG
	LD B,19   
	CALL MPRINT

	
	JP MA_IN
	
	
FILL_SR:
	LD HL,TBLFLSR	;  DISPLAY 4 CHAR INPUT MPROMPT
	LD B,17
	CALL MPRINT
	CALL BYTEIN2
	LD HL,(ADRSINP) ;HL HOLDS SOURCE ADRESS
	RET


FILL_DT:
	LD HL,TBLFLDT
	LD B,18
	CALL MPRINT
	CALL BYTEIN2	;2 BYTE INPUT
	LD HL, (ADRSINP)
	EX DE,HL     ;DE HOLDS TARGET ADRESS
	RET
	
FILL_BYTE:
	LD HL,TBLFLBY
	LD B,18
	CALL MPRINT
	CALL BYTEIN1	;1 BYTE INPUT
	LD A, (DATAINP) ;C HOLDS VALUE TO FILL WITH
	LD C,A
	RET


TBLFLSR:
	.DB 0AH,0DH      ;
	.DB 'Start adr. :'
	.DB '$?',08H

	
TBLFLDT:
	.DB 020H,020H     ;
	.DB 'Lenght       '
	.DB '$?',08H
	
TBLFLBY:
	.DB 020H,020H     ;
	.DB 'Fill with    '
	.DB '#?',08H
	


TABLE14F:
	.DB 0AH,0DH 
	.DB 'Fill '
	.DB 'complete !'
	.DB 0AH,0DH
	

;--------------FILL END


	
;-----------------SAVE-----------------------
;HL: START ADRESS, DE:END ADRESS TO SAVE	

SAVEX: 		


	CALL SAVE_ADR1
	PUSH HL
	
	CALL SAVE_ADR2
	POP HL
	
       	CALL INTSAVE
       	JP MA_IN
	
	

	


SAVE_ADR1:
	LD HL,TBLSV1
	LD B,11
	CALL MPRINT

	CALL BYTEIN2
	LD HL,(ADRSINP)
	RET

SAVE_ADR2:
	LD HL,TBLSV2
	LD B,11
	CALL MPRINT
	
	CALL BYTEIN2
	LD DE,0
	LD HL, (ADRSINP)
	EX DE,HL     ;DE HOLDS END ADRESS
	RET
	
TBLSV1:	.DB 0AH,0DH
	.DB 'S-Start '
	.DB '$?',08H
	
TBLSV2:	.DB 0AH,0DH
	.DB 'S-End   '
	.DB '$?',08H
	
;-------------save end----------------

;------------------INPUT--------------------------------
;INPUT DONT CHANGES ANY REGISTER!!!
;1 BYTE RESULT AT: DATAINP
;2 BYTE RESULT AT: ADRSINP-3F44H


BYTEIN2:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE 
 	LD HL, KEYINBUF  ;4 CHAR ADRESS INPUT
	LD B,4
DIS25:	
    RST 10H
	CP 1BH
	JP Z, MA_IN
	JP CHECKHEX    ;CHECK IF A VALID HEX CHAR
HEXCON2:
	LD (HL), A
	INC HL
	RST 08H  ;MPRINT NIBBLE
	DJNZ DIS25  ;GET 4 NIBBLE FROM KEYINBUF TO 3F23H
	CALL INTLINR  ;  
	LD HL,(KEYINRES)
	LD (ADRSINP),HL ; TWO BYTES ADRESS AT 3F43(High), AND 3F44(Low)
	POP DE 
	POP BC
	POP HL
	POP AF
	RET
		
	
BYTEIN1:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	LD HL, KEYINBUF + 2 ;2 CHAR DATA INPUT
	LD B,2
DIS26:	
    RST 10H
	CP 1BH
	JP Z, MA_IN
	JP CHECKHEX2
	
HEXCON3:

	LD (HL), A
	INC HL
	RST 08H   ;MPRINT NIBBLE
	DJNZ DIS26
	CALL INLIN2  
	LD A,(KEYINRES)
	LD (DATAINP),A ;1 BYTE INPUT: RESULT IN 3F42

	POP DE 
	POP BC
	POP HL
	POP AF
	RET
	
	
;---------------------------------	
;-------------------------1 BYTE CHECK IF HEX------	
CHECKHEX2:	;CHECK IF INPUT IS A REAL HEX VALUE FOR 1 BYTE INPUT
	PUSH HL
	PUSH AF
	PUSH BC
	LD HL, TABLEX   ;HEX CHAR TABLE
	LD B,16
DONHEXX2:
	CP (HL)
	JP Z,OKHEX2	;FINDED A VALID HEX CHAR, RETURN TO CONTINUE
	INC HL
	DJNZ DONHEXX2
	
NOTHEX2: POP BC
	POP AF
	POP HL
	JP DIS26
	
	
OKHEX2:
 	POP BC
	POP AF
	POP HL
	JP HEXCON3	;CONTINUE TO WRITE INPUT PROCESS
;--1 BYTE CHECK FINISHED
	
CHECKHEX:	;CHECK IF INPUT IS A REAL HEX VALUE FOR 2 BYTE INPUT
	PUSH HL
	PUSH AF
	PUSH BC
	LD HL, TABLEX   ;HEX CHAR TABLE
	LD B,16
DONHEXX:
	CP (HL)
	JP Z,OKHEX	;FINDED A VALID HEX CHAR, RETURN TO CONTINUE
	INC HL
	DJNZ DONHEXX
	
NOTHEX: POP BC
	POP AF
	POP HL
	JP DIS25
	
	
OKHEX: 	POP BC
	POP AF
	POP HL
	JP HEXCON2	;CONTINUE TO WRITE INPUT PROCESS
;--2 BYTE CHECK FINISHED
	
	
	
	
;--------------------EDIT------------------------------
	
EDIT:
    LD HL,TABLEDIT 	;EDIT MESSAGE
	LD B,14
	CALL MPRINT
	
	CALL BYTEIN2   ;GET ADRESS TO EDIT
	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H
	LD HL,(ADRSINP)
	LD (EDITADR),HL

DONEDIT:
	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H
	LD A,'E'
	RST 08H
	LD A,'-'
	RST 08H


	
	LD HL,(EDITADR)	;MPRINT INPUT ADRESS
	LD A,H
	CALL HEXOUT 	
	LD A,L
	CALL HEXOUT
	
	LD A,':'
	RST 08H
	LD A,' '
	RST 08H
	
	LD A,(HL)
	CALL HEXOUT  	;MPRINT EDITING ADRESS CONTENT
	 
	LD A,08H
	RST 08H
	LD A,08H
	RST 08H	;CURSOR 2 CHAR BACK
	
	CALL BYTEIN1
	CALL DE_LAY
	
	LD A,(DATAINP)
	LD HL,(EDITADR)
	LD (HL),A
	
EDITNEXT:	
	INC HL
	LD (EDITADR),HL
	JP DONEDIT
	
	JP EDITNEXT	
		
TABLEDIT:
	.DB 'Edit memory :'
	.DB '$'	  


;------------------GO TO ADRESS-(RUN)----------------------

RUN_ADR:
	LD A,'G'
	RST 08H
	LD A,'-'
	RST 08H 
	LD A, '$'
	RST 08H
	LD A, '?'
	RST 08H
	LD A, 08H
	RST 08H ; DISPLAY 4 CHAR INPUT MPROMPT
	CALL BYTEIN2
	LD HL, (ADRSINP)
	JP (HL)
	
	

;----------------INPUT HEX TO BYTE CONVERTER 2 BYTE OR 1 BYTE---------
INTLINR:                   ;4 NIBBLE  INPUT   
	LD HL, KEYINBUF -1 ; 
	LD A,(HL)
	CALL BYTERDR 
	LD (KEYINRES + 1),A 
	
INLIN2:	LD HL, KEYINBUF + 1       ;2 NIBBLE INPUT
	LD A,(HL)
	CALL BYTERDR 
	LD (KEYINRES),A 
	RET
	

BYTERDR:
		
	LD	D,000h		;Set up   ;	* Get 2 ASCII chrs as hex byte	*
	CALL	HEXCONR		;Get byte and convert to hex
	ADD	A,A		;First nibble so
	ADD	A,A		;multiply by 16
	ADD	A,A		;
	ADD	A,A		;
	LD	D,A		;Save hi nibble in D
HEXCONR:
	
	INC HL                ;HL:FF21
	
	LD A, (HL)
		
	;CALL	RXA		;Get next chr
	SUB	030h		;Makes '0'-'9' equal 0-9
	CP	00Ah		;Is it 0-9 ?
	JR	C,NALPHAR	;If so miss next bit
	SUB	007h		;Else convert alpha
NALPHAR:	
	OR	D		;Add hi nibble back
	RET			;RESULT STORED IN A REGISTER!



;---------------LOAD HEX FILE ROUTINE

LOADERZ:
	LD HL,TABLE25         ; LOADING.. MSG
	LD B,15               ; DECIMAL IF NOT H AT THE END
	CALL MPRINT	
	CALL INTLIN1
	
LOAD_ED:	              ; FILE LOADED MESAGE
	LD HL,TABLE2
	LD B, 15
	CALL MPRINT
	
	LD A,'$'
	RST 08H
	
	LD HL,(LOADSTADR)     ; DOWNLOADED FILE START ADRESS
	LD A,H
	CALL HEXOUT
	LD A,L
	CALL HEXOUT

	LD A,0AH
	RST 08H
	LD A,0DH
	RST 08H
	LD A,07H
	RST 08H
	
	JP MA_IN
	
		
;	*********************************
;	*				*
;	*     Get Intel hex record	*
;	*				*
;	*********************************

;Short version - no checksum calculation.

INTLIN1:	
	LD A,000H
	LD (HEXLDREG),A
INTLIN:	
    RST 10H		;Get chr
	CP  1BH
	RET Z
	CP	':'		;Is it ':'?
	JR	NZ,INTLIN	;If not then next
	CALL	BYTERD		;Get record length
	LD	B,A		;Put in B
	CALL	BYTERD		;Get record address hi byte
	LD	H,A		;Put in H
	CALL	BYTERD		;Get record address lo byte
	LD	L,A		;Put in L
	
	LD A,(HEXLDREG)		;CHECK IF HL RECORDED TO DISPLAY SOURCE ADRESS BEFORE?
	CP 01                   ;IF NOT, RECORD IT. OTHERWISE GO ON
	JP Z,GO_ON
	LD A,001H
	LD (HEXLDREG),A
	LD (LOADSTADR),HL	; LOADED PROGRAM START ADRESS HEADER REGISTER
	
GO_ON:	
    CALL	BYTERD		;Record type(NOT IGNORED IN EFEX MON)
	CP 01                   ;IF END OF FILE THEN EXIT PROGRAM
	RET Z          ;JP Z,LOAD_ED        PROGRAM ENDED RETURN TO HOME
	
	
DATAIN:	
    CALL	BYTERD		;Get record data byte
	LD	(HL),A		;Save byte to memory
	INC	HL		;Next address
	DJNZ	DATAIN		;Decrement count and jump if not finished
	JR	INTLIN		;Ignore checksum byte and [CR][LF]
	
	RET		;PROGRAM ENDED RETURN HOME

BYTERD:	
    LD	D,000h		;Set up   ;	* Get 2 ASCII chrs as hex byte	*
	CALL	HEXCON		;Get byte and convert to hex
	ADD	A,A		;First nibble so
	ADD	A,A		;multiply by 16
	ADD	A,A		;
	ADD	A,A		;
	LD	D,A		;Save hi nibble in D
HEXCON:	
    RST 10H 		;Get next chr
	SUB	030h		;Makes '0'-'9' equal 0-9
	CP	00Ah		;Is it 0-9 ?
	JR	C,NALPHA	;If so miss next bit
	SUB	007h		;Else convert alpha
NALPHA:	
    OR	D	    	;Add hi nibble back
	RET		    	;

;-------------------------Hex load finished-----------------

;--------------------------INTEL HEX SAVE ROUTINE
;,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
;INTEL HEX SAVE PROGRAM         ;
;,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
;	LD HL,START ADRESS
;	LD DE, END ADRESS
	
INTSAVE:
	PUSH HL
	EX DE,HL
	SBC HL,DE
	EX DE,HL
	POP HL
	LD A,0
	LD (SAVECHCK),A	;RESET CHECKSUM COUNTER
	LD B,10H
	
	LD A,0DH		;ENTER
	RST 08H         ;TXA ROUTINE
	LD A,0AH
	RST 08H         ;TXA ROUTINE
	
COMP:	
    LD A,D	        ; DE TEK BAYTA INMIS
	CP 0
	JP Z, MMINUS
	JP DONGU
	
MMINUS:	LD A,E      ;E 10H TAN KUCUKSE..
	SUB 10H
	JP C,MINIMUS
	JP DONGU
	
MINIMUS: LD B,E    ;DE 10H TAN AZ
	JP DONGU1 
	
DONGU:	LD B,10H
DONGU1:	LD A,':'
	RST 08H ;TXA ROUTINE		;SEND START CODE
	LD A,B
	CALL HEXOUT		;SEND BYTE COUNT (DEFAULT 16)
	
	LD A,H 			;SEND RECORD ADRESS
	CALL HEXOUT
	LD A,L
	CALL HEXOUT
	
	LD A,0 			;SEND RECORD TYPE (0=DATA)
	CALL HEXOUT
	
	CALL YAZ
	LD A,D		;DE BYTE COUNT REACHED?
	OR E
	JP NZ, COMP
	
	LD A,':'		;ENDING COLON
	RST 08H ;TXA ROUTINE		
	LD B,07H
DISEND:	LD A,'0'
	RST 08H ;TXA ROUTINE
	DJNZ DISEND
	LD A,'1'
	RST 08H ;TXA ROUTINE
	LD A,0FFH
	CALL HEXOUT
	
	RET      ;PROGRAM ENDED    CALL RE_START	RESET DISPLAYS
	         ;JP MA_IN	;TURN INTO ROM

	
	
	
	
YAZ:	LD A,(HL)
	CALL HEXOUT
	INC HL
	DEC DE
	DJNZ YAZ		;16 BYTES SENDED
	LD A, 0FFH		;SEND FAKE CHECKSUM
	CALL HEXOUT
	
	LD A,0DH		;ENTER
	RST 08H ;TXA ROUTINE
	LD A,0AH
	RST 08H ;TXA ROUTINE
	RET
		
;------------------------------SAVE FINISHED




;----------------------HEXOUT--------------------------------------------
		
	
	
;HEXOUT DO NOT CHANGES ANY REGISTER	
HEXOUT:	PUSH BC ; THIS SUBROUTINE SENDS CONTENTS OF ACC TO TERMINAL AS 
	PUSH DE ; TWO CHAR HEX VALUE (ASCII) 
	PUSH HL
	PUSH AF
	
	AND 0F0H
	RRA
	RRA
	RRA
	RRA
	LD (HIGHNIBBLE),A  ;HIGH NIBBLE SYSTEM VARIABLE
	CALL HEXAS
	
	POP AF
	PUSH AF
	AND 00FH
	LD (LOWNIBBLE),A  ;LOW NIBBLE SYSTEM VARIABLE
	CALL HEXAS
	
	POP AF
	POP HL
	POP DE
	POP BC
	
	RET
	
HEXAS:	LD HL, TABLEX ; HEX NIBBLE TO ASCII CONVERTER
	LD  B, 0	;ADDING HL WITH A
	LD  C, A
	ADC HL, BC
       	LD A,(HL)
	RST 08H ;TXA ROUTINE
	RET	
TABLEX:	.DB '0','1','2','3','4','5','6','7'
	.DB '8','9','A','B','C','D','E','F'
	

;HEXOUT DO NOT CHANGES ANY REGISTER

TABLE28:
	.DB 0AH,0DH
	.DB 'ENTER AD:'

TABLE29:
	.DB 0AH,0DH
	.DB 'ENTER DT:'
	
TABLE:
    .DB 0AH,0DH
	.DB 'EfexMon 1.1 by M. Peker'
	.DB 0AH,0DH
	.DB 'Attraktor e.V.'
	.DB 0AH,0DH
	.DB 'Press H '
	.DB 'for help'
	.DB 0AH,0DH
    .DB 0AH,0DH 
	.DB 'Ready.'
	.DB 0AH,0DH
	.DB 07H
	
TABLE13:
	.DB 0AH,0DH,07H
	.DB 'Press '
	.DB 'any key '
	.DB 'to send !'
	.DB 0AH,0DH
	
TABLE2: .DB 0DH 
	.DB 'loaded '
	.DB 'adress:'

TABLE25: 
	.DB 0DH
	.DB 'Hex Loading'
	.DB '...'
        
		
	
	
TABLE6:	.DB 0AH,0DH
	.DB '>'
	
TABLE21:
	.DB 0AH,0DH

	
	
	.DB 'A-'
	.DB 'Assembler'
	.DB 0AH,0DH
	
	
	.DB 'D-'
	.DB 'Disassembler'
	.DB 0AH,0DH
	
	.DB 'B-Basic'
	.DB 0AH,0DH

	.DB 'L-Load'

	.DB 0AH,0DH
	

	.DB 'S-Save'

	.DB 0AH,0DH
	

	.DB 'E-Edit'

	.DB 0AH,0DH
	
	
	.DB 'W-Warmst'

	.DB 0AH,0DH
	
	
	.DB 'M-Move'
	.DB 0AH,0DH
	
	
	.DB 'X-Hexdump'
	.DB 0AH,0DH
	
	
		
	.DB 'G-Go'
 	.DB 0AH,0DH
	
	.DB 'F-Fill'
	.DB 0AH,0DH
	
	
	.DB 'U-Routines'
 
	.DB 0AH,0DH
	
	
TABLEH10:	
	.DB 'DELAY  (S):  $'
	

	
TABLEH8:	
	.DB 'MPROMPT (R):  $'
		
TABLEH7:
	
	.DB ' A -> UART'
	.DB 0AH,0DH
	
TABLEH6:
	
	.DB 'HEXOUT (S):  $'
	
	
	
TABLEH5:
	
	.DB ' -> FF42'
	.DB 0AH,0DH
	
	
TABLEH4:	
	.DB 'BYTEIN1(S):  $'

TABLEH3:	
	
	
	.DB ' -> FF43-FF44'
	.DB 0AH,0DH

TABLEH2:            ;
	.DB 'BYTEIN2(S):  $'	
	
TABLEH1:
	.DB 'RXA    (S):  $'	
	
TABLE22:

	
	.DB 'TXA    (S):  $'
	
	
;--ASSEMBLER AND DISASSEMBLER OPERATES ON SAME TABLE
;
;        
;INSTRUCTION , VIRGUL, CODE COUNT,MACHINE CODE,OPERAND #-$-NULL, TOTAL BYTE COUNT 
;2CH VIRGUL DEMEK
;BU ASSEMBLER .DB DE VIRGUL KABUL ETMIYOR!!!

	
TABLECOD:

		
	.DB '_ADC A',2CH,'(HL)',1,08EH,0FFH

	.DB '_ADC A',2CH,'A',1,08FH,0FFH	;0FFH IS NULL INDEX CODE TO FIND  COMMAND 
	.DB '_ADC A',2CH,'B',1,088H,0FFH	;'_' IS INDEX CHAR TO FIND MNEMONIC
	.DB '_ADC A',2CH,'C',1,089H,0FFH
	.DB '_ADC A',2CH,'D',1,08AH,0FFH
	.DB '_ADC A',2CH,'E',1,08BH,0FFH
	.DB '_ADC A',2CH,'H',1,08CH,0FFH
	.DB '_ADC A',2CH,'L',1,08DH,0FFH
	.DB '_ADC A',2CH,'#',1,0CEH,0FFH

   
	.DB '_ADD A',2CH,'(HL)',1,086H,0FFH

	.DB '_ADD A',2CH,'A',1,087H,0FFH
	.DB '_ADD A',2CH,'B',1,080H,0FFH
	.DB '_ADD A',2CH,'C',1,081H,0FFH
	.DB '_ADD A',2CH,'D',1,082H,0FFH
	.DB '_ADD A',2CH,'E',1,083H,0FFH
	.DB '_ADD A',2CH,'H',1,084H,0FFH
	.DB '_ADD A',2CH,'L',1,085H,0FFH
	.DB '_ADD A',2CH,'#',1,0C6H,0FFH
	.DB '_ADD HL',2CH,'BC',1,009H,0FFH
	.DB '_ADD HL',2CH,'DE',1,019H,0FFH
	.DB '_ADD HL',2CH,'HL',1,029H,0FFH
	.DB '_ADD HL',2CH,'SP',1,039H,0FFH

   
	.DB '_AND (HL)',1,0A6H,0FFH

	.DB '_AND A',1,0A7H,0FFH
	.DB '_AND B',1,0A0H,0FFH
	.DB '_AND C',1,0A1H,0FFH
	.DB '_AND D',1,0A2H,0FFH
	.DB '_AND E',1,0A3H,0FFH
	.DB '_AND H',1,0A4H,0FFH
	.DB '_AND L',1,0A5H,0FFH
	.DB '_AND #',1,0E6H,0FFH
	

	   

	   
	.DB '_CALL C',2CH,'$',1,0DCH,0FFH
	.DB '_CALL M',2CH,'$',1,0FCH,0FFH
	.DB '_CALL NC',2CH,'$',1,0D4H,0FFH
	.DB '_CALL NZ',2CH,'$',1,0C4H,0FFH
	.DB '_CALL P',2CH,'$',1,0F4H,0FFH
	.DB '_CALL PE',2CH,'$',1,0ECH,0FFH
	.DB '_CALL PO',2CH,'$',1,0E4H,0FFH
	.DB '_CALL Z',2CH,'$',1,0CCH,0FFH
	.DB '_CALL $',1,0CDH,0FFH
	   
	.DB '_CCF',1,03FH,0FFH
	   
	.DB '_CP (HL)',1,0BEH,0FFH

	.DB '_CP A',1,0BFH,0FFH
	.DB '_CP B',1,0B8H,0FFH
	.DB '_CP C',1,0B9H,0FFH
	.DB '_CP D',1,0BAH,0FFH
	.DB '_CP E',1,0BBH,0FFH
	.DB '_CP H',1,0BCH,0FFH
	.DB '_CP L',1,0BDH,0FFH
	.DB '_CP #',1,0FEH,0FFH
	


	.DB '_CPL',1,02FH,0FFH
	   
	.DB '_DAA',1,027H,0FFH
	   
	.DB '_DEC (HL)',1,035H,0FFH

	.DB '_DEC A',1,03DH,0FFH
	.DB '_DEC B',1,005H,0FFH
	.DB '_DEC BC',1,00BH,0FFH
	.DB '_DEC C',1,00DH,0FFH
	.DB '_DEC D',1,015H,0FFH
	.DB '_DEC DE',1,01BH,0FFH
	.DB '_DEC E',1,01DH,0FFH
	.DB '_DEC H',1,025H,0FFH
	.DB '_DEC HL',1,02BH,0FFH

	.DB '_DEC L',1,02DH,0FFH
	.DB '_DEC SP',1,03BH,0FFH
	.DB '_DI',1,0F3H,0FFH
	.DB '_DJNZ #',1,010H,0FFH
	   
	.DB '_EI',1,0FBH,0FFH
	.DB '_EX (SP)',2CH,'HL',1,0E3H,0FFH
	.DB '_EX AF',2CH,'AF',1,008H,0FFH
	.DB '_EX DE',2CH,'HL',1,0EBH,0FFH
	.DB '_EXX',1,0D9H,0FFH

	.DB '_HALT',1,076H,0FFH
	   

	   

	   
	.DB '_IN A',2CH,'(#)',1,0DBH,0FFH
	   

	 DB '_INC (HL)',1,034H,0FFH

	.DB '_INC A',1,03CH,0FFH
	.DB '_INC B',1,004H,0FFH
	.DB '_INC BC',1,003H,0FFH
	.DB '_INC C',1,00CH,0FFH
	.DB '_INC D',1,014H,0FFH
	.DB '_INC DE',1,013H,0FFH
	.DB '_INC E',1,01CH,0FFH
	.DB '_INC H',1,024H,0FFH
	.DB '_INC HL',1,023H,0FFH

	.DB '_INC L',1,02CH,0FFH
	.DB '_INC SP',1,033H,0FFH
	   
	.DB '_JR C',2CH,'#',1,038H,0FFH
	.DB '_JR NC',2CH,'#',1,030H,0FFH
	.DB '_JR NZ',2CH,'#',1,020H,0FFH
	.DB '_JR Z',2CH,'#',1,028H,0FFH
	.DB '_JR #',1,018H,0FFH	   

	   

	.DB '_JP (HL)',1,0E9H,0FFH

	.DB '_JP C',2CH,'$',1,0DAH,0FFH
	.DB '_JP M',2CH,'$',1,0FAH,0FFH
	.DB '_JP NC',2CH,'$',1,0D2H,0FFH
	.DB '_JP NZ',2CH,'$',1,0C2H,0FFH
	.DB '_JP P',2CH,'$',1,0F2H,0FFH
	.DB '_JP PE',2CH,'$',1,0EAH,0FFH
	.DB '_JP PO',2CH,'$',1,0E2H,0FFH
	.DB '_JP Z',2CH,'$',1,0CAH,0FFH
	.DB '_JP $',1,0C3H,0FFH
	   

	   
	.DB '_LD (BC)',2CH,'A',1,002H,0FFH
	.DB '_LD (DE)',2CH,'A',1,012H,0FFH
	.DB '_LD (HL)',2CH,'A',1,077H,0FFH
	.DB '_LD (HL)',2CH,'B',1,070H,0FFH
	.DB '_LD (HL)',2CH,'C',1,071H,0FFH
	.DB '_LD (HL)',2CH,'D',1,072H,0FFH
	.DB '_LD (HL)',2CH,'E',1,073H,0FFH
	.DB '_LD (HL)',2CH,'H',1,074H,0FFH
	.DB '_LD (HL)',2CH,'L',1,075H,0FFH
	.DB '_LD (HL)',2CH,'#',1,036H,0FFH

	.DB '_LD ($)',2CH,'A',1,032H,0FFH
	.DB '_LD ($)',2CH,'HL',1,022H,0FFH
	
	
	.DB '_LD A',2CH,'(BC)',1,00AH,0FFH
	.DB '_LD A',2CH,'(DE)',1,01AH,0FFH
	.DB '_LD A',2CH,'(HL)',1,07EH,0FFH

	.DB '_LD A',2CH,'A',1,07FH,0FFH
	.DB '_LD A',2CH,'B',1,078H,0FFH
	.DB '_LD A',2CH,'C',1,079H,0FFH
	.DB '_LD A',2CH,'D',1,07AH,0FFH
	.DB '_LD A',2CH,'E',1,07BH,0FFH
	.DB '_LD A',2CH,'H',1,07CH,0FFH
	.DB '_LD A',2CH,'L',1,07DH,0FFH
	.DB '_LD A',2CH,'($)',1,03AH,0FFH
	.DB '_LD A',2CH,'#',1,03EH,0FFH             
	.DB '_LD B',2CH,'(HL)',1,046H,0FFH
	.DB '_LD B',2CH,'A',1,047H,0FFH
	.DB '_LD B',2CH,'B',1,040H,0FFH
	.DB '_LD B',2CH,'C',1,041H,0FFH
	.DB '_LD B',2CH,'D',1,042H,0FFH
	.DB '_LD B',2CH,'E',1,043H,0FFH
	.DB '_LD B',2CH,'H',1,044H,0FFH
	.DB '_LD B',2CH,'L',1,045H,0FFH
	.DB '_LD B',2CH,'#',1,006H,0FFH
	.DB '_LD BC',2CH,'$',1,001H,0FFH
	.DB '_LD C',2CH,'(HL)',1,04EH,0FFH
	.DB '_LD C',2CH,'A',1,04FH,0FFH
	.DB '_LD C',2CH,'B',1,048H,0FFH
	.DB '_LD C',2CH,'C',1,049H,0FFH
	.DB '_LD C',2CH,'D',1,04AH,0FFH
	.DB '_LD C',2CH,'E',1,04BH,0FFH
	.DB '_LD C',2CH,'H',1,04CH,0FFH
	.DB '_LD C',2CH,'L',1,04DH,0FFH
	.DB '_LD C',2CH,'#',1,00EH,0FFH
	.DB '_LD D',2CH,'(HL)',1,056H,0FFH
	.DB '_LD D',2CH,'A',1,057H,0FFH
	.DB '_LD D',2CH,'B',1,050H,0FFH
	.DB '_LD D',2CH,'C',1,051H,0FFH
	.DB '_LD D',2CH,'D',1,052H,0FFH
	.DB '_LD D',2CH,'E',1,053H,0FFH
	.DB '_LD D',2CH,'H',1,054H,0FFH
	.DB '_LD D',2CH,'L',1,055H,0FFH
	.DB '_LD D',2CH,'#',1,016H,0FFH
	.DB '_LD DE',2CH,'$',1,011H,0FFH
	.DB '_LD E',2CH,'(HL)',1,05EH,0FFH
	.DB '_LD E',2CH,'A',1,05FH,0FFH
	.DB '_LD E',2CH,'B',1,058H,0FFH
	.DB '_LD E',2CH,'C',1,059H,0FFH
	.DB '_LD E',2CH,'D',1,05AH,0FFH
	.DB '_LD E',2CH,'E',1,05BH,0FFH
	.DB '_LD E',2CH,'H',1,05CH,0FFH
	.DB '_LD E',2CH,'L',1,05DH,0FFH
	.DB '_LD E',2CH,'#',1,01EH,0FFH
	.DB '_LD H',2CH,'(HL)',1,066H,0FFH
	.DB '_LD H',2CH,'A',1,067H,0FFH
	.DB '_LD H',2CH,'B',1,060H,0FFH
	.DB '_LD H',2CH,'C',1,061H,0FFH
	.DB '_LD H',2CH,'D',1,062H,0FFH
	.DB '_LD H',2CH,'E',1,063H,0FFH
	.DB '_LD H',2CH,'H',1,064H,0FFH
	.DB '_LD H',2CH,'L',1,065H,0FFH
	.DB '_LD H',2CH,'#',1,026H,0FFH
	.DB '_LD HL',2CH,'($)',1,02AH,0FFH
	.DB '_LD HL',2CH,'$',1,021H,0FFH
	.DB '_LD L',2CH,'(HL)',1,06EH,0FFH
	.DB '_LD L',2CH,'A',1,06FH,0FFH
	.DB '_LD L',2CH,'B',1,068H,0FFH
	.DB '_LD L',2CH,'C',1,069H,0FFH
	.DB '_LD L',2CH,'D',1,06AH,0FFH
	.DB '_LD L',2CH,'E',1,06BH,0FFH
	.DB '_LD L',2CH,'H',1,06CH,0FFH
	.DB '_LD L',2CH,'L',1,06DH,0FFH
	.DB '_LD L',2CH,'#',1,02EH,0FFH
	.DB '_LD SP',2CH,'$',1,031H,0FFH
	.DB '_LD SP',2CH,'HL',1,0F9H,0FFH
	
	
			



	

	.DB '_NOP',1,000H,0FFH
   
	.DB '_OR (HL)',1,0B6H,0FFH

	.DB '_OR A',1,0B7H,0FFH
	.DB '_OR B',1,0B0H,0FFH
	.DB '_OR C',1,0B1H,0FFH
	.DB '_OR D',1,0B2H,0FFH
	.DB '_OR E',1,0B3H,0FFH
	.DB '_OR H',1,0B4H,0FFH
	.DB '_OR L',1,0B5H,0FFH
	.DB '_OR #',1,0F6H,0FFH
	   

	.DB '_OUT (#)',2CH,'A',1,0D3H,0FFH
	   
	   

	   
	.DB '_POP AF',1,0F1H,0FFH
	.DB '_POP BC',1,0C1H,0FFH
	.DB '_POP DE',1,0D1H,0FFH
	.DB '_POP HL',1,0E1H,0FFH

	   
	.DB '_PUSH AF',1,0F5H,0FFH
	.DB '_PUSH BC',1,0C5H,0FFH
	.DB '_PUSH DE',1,0D5H,0FFH
	.DB '_PUSH HL',1,0E5H,0FFH

	   
	.DB '_RET',1,0C9H,0FFH
	.DB '_RET C',1,0D8H,0FFH
	.DB '_RET M',1,0F8H,0FFH
	.DB '_RET NC',1,0D0H,0FFH
	.DB '_RET NZ',1,0C0H,0FFH
	.DB '_RET P',1,0F0H,0FFH
	.DB '_RET PE',1,0E8H,0FFH
	.DB '_RET PO',1,0E0H,0FFH
	.DB '_RET Z',1,0C8H,0FFH

	.DB '_RLA',1,017H,0FFH
	   

	   

	.DB '_RLCA',1,007H,0FFH
	.DB '_RRA',1,01FH,0FFH

	.DB '_RRCA',1,00FH,0FFH

   
	.DB '_RST 00',1,0C7H,0FFH
	.DB '_RST 08',1,0CFH,0FFH
	.DB '_RST 10',1,0D7H,0FFH
	.DB '_RST 18',1,0DFH,0FFH
	.DB '_RST 20',1,0E7H,0FFH
	.DB '_RST 28',1,0EFH,0FFH
	.DB '_RST 30',1,0F7H,0FFH
	.DB '_RST 38',1,0FFH,0FFH
	   
	.DB '_SBC A',2CH,'(HL)',1,09EH,0FFH

	.DB '_SBC A',2CH,'A',1,09FH,0FFH
	.DB '_SBC A',2CH,'B',1,098H,0FFH
	.DB '_SBC A',2CH,'C',1,099H,0FFH
	.DB '_SBC A',2CH,'D',1,09AH,0FFH
	.DB '_SBC A',2CH,'E',1,09BH,0FFH
	.DB '_SBC A',2CH,'H',1,09CH,0FFH
	.DB '_SBC A',2CH,'L',1,09DH,0FFH

	.DB '_SBC A',2CH,'#',1,0DEH,0FFH
	
	.DB '_SCF',1,037H,0FFH
	   

	   	   

   
	.DB '_SUB (HL)',1,096H,0FFH

	.DB '_SUB A',1,097H,0FFH
	.DB '_SUB B',1,090H,0FFH
	.DB '_SUB C',1,091H,0FFH
	.DB '_SUB D',1,092H,0FFH
	.DB '_SUB E',1,093H,0FFH
	.DB '_SUB H',1,094H,0FFH
	.DB '_SUB L',1,095H,0FFH
	.DB '_SUB #',1,0D6H,0FFH
	   
	   
	.DB '_XOR (HL)',1,0AEH,0FFH

	.DB '_XOR A',1,0AFH,0FFH
	.DB '_XOR B',1,0A8H,0FFH
	.DB '_XOR C',1,0A9H,0FFH
	.DB '_XOR D',1,0AAH,0FFH
	.DB '_XOR E',1,0ABH,0FFH
	.DB '_XOR H',1,0ACH,0FFH
	.DB '_XOR L',1,0ADH,0FFH
	.DB '_XOR #',1,0EEH,0FFH
	
AFTERCOD:
	.DB '_ADC A',2CH,'(IX+#)',2,0DDH,08EH
	.DB '_ADC A',2CH,'(IY+#)',2,0FDH,08EH
	.DB '_ADC HL',2CH,'BC',2,0EDH,04AH
	.DB '_ADC HL',2CH,'DE',2,0EDH,05AH
	.DB '_ADC HL',2CH,'HL',2,0EDH,06AH
	.DB '_ADC HL',2CH,'SP',2,0EDH,07AH
	.DB '_ADD A',2CH,'(IX+#)',2,0DDH,086H
	.DB '_ADD A',2CH,'(IY+#)',2,0FDH,086H
	.DB '_ADD IX',2CH,'BC',2,0DDH,009H
	.DB '_ADD IX',2CH,'DE',2,0DDH,019H
	.DB '_ADD IX',2CH,'IX',2,0DDH,029H
	.DB '_ADD IX',2CH,'SP',2,0DDH,039H
	.DB '_ADD IY',2CH,'BC',2,0FDH,009H
	.DB '_ADD IY',2CH,'DE',2,0FDH,019H
	.DB '_ADD IY',2CH,'IY',2,0FDH,029H
	.DB '_ADD IY',2CH,'SP',2,0FDH,039H
	.DB '_AND (IX+#)',2,0DDH,0A6H
	.DB '_AND (IY+#)',2,0FDH,0A6H
	.DB '_BIT #',2CH,'(HL)',2,0CBH,046H
	.DB '_BIT #',2CH,'A',2,0CBH,047H
	.DB '_BIT #',2CH,'B',2,0CBH,040H
	.DB '_BIT #',2CH,'C',2,0CBH,041H
	.DB '_BIT #',2CH,'D',2,0CBH,042H
	.DB '_BIT #',2CH,'E',2,0CBH,043H
	.DB '_BIT #',2CH,'H',2,0CBH,044H
	.DB '_BIT #',2CH,'L',2,0CBH,045H
	.DB '_CP (IX+#)',2,0DDH,0BEH
	.DB '_CP (IY+#)',2,0FDH,0BEH
	.DB '_CPD',2,0EDH,0A9H	;BASLANGICI BENZER KOMUTLARDA TABLODA ONCE KISA OLAN OLMALI
	.DB '_CPDR',2,0EDH,0B9H
	.DB '_CPI',2,0EDH,0A1H
	.DB '_CPIR',2,0EDH,0B1H
	.DB '_DEC (IX+#)',2,0DDH,035H
	.DB '_DEC (IY+#)',2,0FDH,035H
	.DB '_DEC IX',2,0DDH,02BH
	.DB '_DEC IY',2,0FDH,02BH

	.DB '_EX (SP)',2CH,'IX',2,0DDH,0E3H
	.DB '_EX (SP)',2CH,'IY',2,0FDH,0E3H

	.DB '_IM0',2,0EDH,046H
	.DB '_IM1',2,0EDH,056H
	.DB '_IM2',2,0EDH,05EH
	.DB '_IN A',2CH,'(C)',2,0EDH,078H
	.DB '_IN B',2CH,'(C)',2,0EDH,040H
	.DB '_IN C',2CH,'(C)',2,0EDH,048H
	.DB '_IN D',2CH,'(C)',2,0EDH,050H
	.DB '_IN E',2CH,'(C)',2,0EDH,058H
	.DB '_IN H',2CH,'(C)',2,0EDH,060H
	.DB '_IN L',2CH,'(C)',2,0EDH,068H
	.DB '_INC (IX+#)',2,0DDH,034H
	.DB '_INC (IY+#)',2,0FDH,034H
	.DB '_IND',2,0EDH,0AAH
	.DB '_INDR',2,0EDH,0BAH
	.DB '_INI',2,0EDH,0A2H
	.DB '_INIR',2,0EDH,0B2H
	.DB '_INC IX',2,0DDH,023H
	.DB '_INC IY',2,0FDH,023H
	
	.DB '_JP (IX+#)',2,0DDH,0E9H
	.DB '_JP (IY+#)',2,0FDH,0E9H
	

	.DB '_LD (IX+#)',2CH,'A',2,0DDH,077H
	.DB '_LD (IX+#)',2CH,'B',2,0DDH,070H
	.DB '_LD (IX+#)',2CH,'C',2,0DDH,071H
	.DB '_LD (IX+#)',2CH,'D',2,0DDH,072H
	.DB '_LD (IX+#)',2CH,'E',2,0DDH,073H
	.DB '_LD (IX+#)',2CH,'H',2,0DDH,074H
	.DB '_LD (IX+#)',2CH,'L',2,0DDH,075H
	.DB '_LD (IY+#)',2CH,'A',2,0FDH,077H
	.DB '_LD (IY+#)',2CH,'B',2,0FDH,070H
	.DB '_LD (IY+#)',2CH,'C',2,0FDH,071H
	.DB '_LD (IY+#)',2CH,'D',2,0FDH,072H
	.DB '_LD (IY+#)',2CH,'E',2,0FDH,073H
	.DB '_LD (IY+#)',2CH,'H',2,0FDH,074H
	.DB '_LD (IY+#)',2CH,'L',2,0FDH,075H
	.DB '_LD ($)',2CH,'BC',2,0EDH,043H
	.DB '_LD ($)',2CH,'DE',2,0EDH,053H
	.DB '_LD ($)',2CH,'IX',2,0DDH,022H
	.DB '_LD ($)',2CH,'IY',2,0FDH,022H
	.DB '_LD ($)',2CH,'SP',2,0EDH,073H
	.DB '_LD A',2CH,'(IX+#)',2,0DDH,07EH
	.DB '_LD A',2CH,'(IY+#)',2,0FDH,07EH
	.DB '_LD A',2CH,'I',2,0EDH,057H
	.DB '_LD A',2CH,'R',2,0EDH,05FH
	.DB '_LD B',2CH,'(IX+#)',2,0DDH,046H
	.DB '_LD B',2CH,'(IY+#)',2,0FDH,046H
	.DB '_LD BC',2CH,'($)',2,0EDH,04BH
	.DB '_LD C',2CH,'(IX+#)',2,0DDH,04EH
	.DB '_LD C',2CH,'(IY+#)',2,0FDH,04EH
	.DB '_LD D',2CH,'(IX+#)',2,0DDH,056H
	.DB '_LD D',2CH,'(IY+#)',2,0FDH,056H
	.DB '_LD DE',2CH,'($)',2,0EDH,05BH
	.DB '_LD E',2CH,'(IX+#)',2,0DDH,05EH
	.DB '_LD E',2CH,'(IY+#)',2,0FDH,05EH
	.DB '_LD H',2CH,'(IX+#)',2,0DDH,066H
	.DB '_LD H',2CH,'(IY+#)',2,0FDH,066H
	.DB '_LD I',2CH,'A',2,0EDH,047H
	.DB '_LD IX',2CH,'($)',2,0DDH,02AH
	.DB '_LD IX',2CH,'$',2,0DDH,021H
	.DB '_LD IY',2CH,'($)',2,0FDH,02AH
	.DB '_LD IY',2CH,'$',2,0FDH,021H
	.DB '_LD L',2CH,'(IX+#)',2,0DDH,06EH
	.DB '_LD L',2CH,'(IY+#)',2,0FDH,06EH
	.DB '_LD R',2CH,'A',2,0EDH,04FH
	.DB '_LD SP',2CH,'($)',2,0EDH,07BH
	.DB '_LD SP',2CH,'IX',2,0DDH,0F9H
	.DB '_LD SP',2CH,'IY',2,0FDH,0F9H
	.DB '_LDD',2,0EDH,0A8H
	.DB '_LDDR',2,0EDH,0B8H
	.DB '_LDI',2,0EDH,0A0H
	.DB '_LDIR',2,0EDH,0B0H
	.DB '_NEG',2,0EDH,044H
	.DB '_OR (IX+#)',2,0DDH,0B6H
	.DB '_OR (IY+#)',2,0FDH,0B6H
	.DB '_OTDR',2,0EDH,0BBH
	.DB '_OTIR',2,0EDH,0B3H
	   
	.DB '_OUT (C)',2CH,'A',2,0EDH,079H
	.DB '_OUT (C)',2CH,'B',2,0EDH,041H
	.DB '_OUT (C)',2CH,'C',2,0EDH,049H
	.DB '_OUT (C)',2CH,'D',2,0EDH,051H
	.DB '_OUT (C)',2CH,'E',2,0EDH,059H
	.DB '_OUT (C)',2CH,'H',2,0EDH,061H
	.DB '_OUT (C)',2CH,'L',2,0EDH,069H
	.DB '_OUTD',2,0EDH,0ABH
	.DB '_OUTI',2,0EDH,0A3H
	.DB '_POP IX',2,0DDH,0E1H
	.DB '_POP IY',2,0FDH,0E1H
	.DB '_PUSH IX',2,0DDH,0E5H
	.DB '_PUSH IY',2,0FDH,0E5H
	   
	.DB '_RES #',2CH,'(HL)',2,0CBH,086H
;	.DB '_RES #',2CH,'(IX+#)',2,0DDH,0CBH
;	.DB '_RES #',2CH,'(IY+#)',2,0FDH,0CBH
	.DB '_RES #',2CH,'A',2,0CBH,087H
	.DB '_RES #',2CH,'B',2,0CBH,080H
	.DB '_RES #',2CH,'C',2,0CBH,081H
	.DB '_RES #',2CH,'D',2,0CBH,082H
	.DB '_RES #',2CH,'E',2,0CBH,083H
	.DB '_RES #',2CH,'H',2,0CBH,084H
	.DB '_RES #',2CH,'L',2,0CBH,085H
	.DB '_RETI',2,0EDH,04DH
	.DB '_RETN',2,0EDH,045H
	   
	.DB '_RL (HL)',2,0CBH,016H
;	.DB '_RL (IX+#)',2,0DDH,0CBH
;	.DB '_RL (IY+#)',2,0FDH,0CBH
	.DB '_RL A',2,0CBH,017H
	.DB '_RL B',2,0CBH,010H
	.DB '_RL C',2,0CBH,011H
	.DB '_RL D',2,0CBH,012H
	.DB '_RL E',2,0CBH,013H
	.DB '_RL H',2,0CBH,014H
	.DB '_RL L',2,0CBH,015H
	.DB '_RLC (HL)',2,0CBH,006H
;	.DB '_RLC (IX+#)',2,0DDH,0CBH
;	.DB '_RLC (IY+#)',2,0FDH,0CBH
	.DB '_RLC A',2,0CBH,007H
	.DB '_RLC B',2,0CBH,000H
	.DB '_RLC C',2,0CBH,001H
	.DB '_RLC D',2,0CBH,002H
	.DB '_RLC E',2,0CBH,003H
	.DB '_RLC H',2,0CBH,004H
	.DB '_RLC L',2,0CBH,005H
	.DB '_RLD',2,0EDH,06FH
	.DB '_RRD',2,0EDH,067H
	.DB '_RR (HL)',2,0CBH,01EH
;	.DB '_RR (IX+#)',2,0DDH,0CBH
;	.DB '_RR (IY+#)',2,0FDH,0CBH
	.DB '_RR A',2,0CBH,01FH
	.DB '_RR B',2,0CBH,018H
	.DB '_RR C',2,0CBH,019H
	.DB '_RR D',2,0CBH,01AH
	.DB '_RR E',2,0CBH,01BH
	.DB '_RR H',2,0CBH,01CH
	.DB '_RR L',2,0CBH,01DH
	.DB '_RRC (HL)',2,0CBH,00EH
;	.DB '_RRC (IX+#)',2,0DDH,0CBH
;	.DB '_RRC (IY+#)',2,0FDH,0CBH
	.DB '_RRC A',2,0CBH,00FH
	.DB '_RRC B',2,0CBH,008H
	.DB '_RRC C',2,0CBH,009H
	.DB '_RRC D',2,0CBH,00AH
	.DB '_RRC E',2,0CBH,00BH
	.DB '_RRC H',2,0CBH,00CH
	.DB '_RRC L',2,0CBH,00DH
	
	.DB '_SBC A',2CH,'(IX+#)',2,0DDH,09EH
	.DB '_SBC A',2CH,'(IY+#)',2,0FDH,09EH
	.DB '_SBC HL',2CH,'BC',2,0EDH,042H
	.DB '_SBC HL',2CH,'DE',2,0EDH,052H
	.DB '_SBC HL',2CH,'HL',2,0EDH,062H
	.DB '_SBC HL',2CH,'SP',2,0EDH,072H
	.DB '_SET #',2CH,'(HL)',2,0CBH,0C6H
;	.DB '_SET #',2CH,'(IX+#)',2,0DDH,0CBH
;	.DB '_SET #',2CH,'(IY+#)',2,0FDH,0CBH
	.DB '_SET #',2CH,'A',2,0CBH,0C7H
	.DB '_SET #',2CH,'B',2,0CBH,0C0H
	.DB '_SET #',2CH,'C',2,0CBH,0C1H
	.DB '_SET #',2CH,'D',2,0CBH,0C2H
	.DB '_SET #',2CH,'E',2,0CBH,0C3H
	.DB '_SET #',2CH,'H',2,0CBH,0C4H
	.DB '_SET #',2CH,'L',2,0CBH,0C5H
   
	.DB '_SLA (HL)',2,0CBH,026H
;	.DB '_SLA (IX+#)',2,0DDH,0CBH
;	.DB '_SLA (IY+#)',2,0FDH,0CBH
	.DB '_SLA A',2,0CBH,027H
	.DB '_SLA B',2,0CBH,020H
	.DB '_SLA C',2,0CBH,021H
	.DB '_SLA D',2,0CBH,022H
	.DB '_SLA E',2,0CBH,023H
	.DB '_SLA H',2,0CBH,024H
	.DB '_SLA L',2,0CBH,025H
	.DB '_SRA (HL)',2,0CBH,02EH
;	.DB '_SRA (IX+#)',2,0DDH,0CBH
;	.DB '_SRA (IY+#)',2,0FDH,0CBH
	.DB '_SRA A',2,0CBH,02FH
	.DB '_SRA B',2,0CBH,028H
	.DB '_SRA C',2,0CBH,029H
	.DB '_SRA D',2,0CBH,02AH
	.DB '_SRA E',2,0CBH,02BH
	.DB '_SRA H',2,0CBH,02CH
	.DB '_SRA L',2,0CBH,02DH
	   
	.DB '_SRL (HL)',2,0CBH,03EH
;	.DB '_SRL (IX+#)',2,0DDH,0CBH
;	.DB '_SRL (IY+#)',2,0FDH,0CBH
	.DB '_SRL A',2,0CBH,03FH
	.DB '_SRL B',2,0CBH,038H
	.DB '_SRL C',2,0CBH,039H
	.DB '_SRL D',2,0CBH,03AH
	.DB '_SRL E',2,0CBH,03BH
	.DB '_SRL H',2,0CBH,03CH
	.DB '_SRL L',2,0CBH,03DH
	.DB '_SUB (IX+#)',2,0DDH,096H
	.DB '_SUB (IY+#)',2,0FDH,096H

	.DB '_XOR (IX+#)',2,0DDH,0AEH
	.DB '_XOR (IY+#)',2,0FDH,0AEH

	.DB 0,0,0,0,0,0,0,0
	.DB 0,0,0,0,0,0,0,0
CODEND:	.DB 0,0,0,0,0,0,0,0
	.DB 0,0,0,0,0,0,0,0
	
		
	.END